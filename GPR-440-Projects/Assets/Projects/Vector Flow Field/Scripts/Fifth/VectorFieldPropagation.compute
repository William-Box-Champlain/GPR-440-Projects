// VectorFieldPropagation.compute - Compute shader for vector field generation

// Define sampler states
SamplerState samplerLinearClamp;
SamplerState samplerPointClamp;

// Clear kernel - resets vector field to zero
#pragma kernel ClearVectorField

// Target setting kernel - initializes flow from target points
#pragma kernel SetTargets

// Propagation kernel - implements light propagation algorithm
#pragma kernel PropagateVectorField 

// Resolution transition kernel - blends between resolution levels
#pragma kernel ApplyResolutionTransitions

// ----- SHARED TEXTURES & PARAMETERS -----

// Navigation map texture (from MipmapGenerator)
Texture2D<float> _NavigationTexture;

// Vector field textures
RWTexture2D<float2> _VectorFieldTexture;
RWTexture2D<float2> _VectorFieldCurrent;
RWTexture2D<float2> _VectorFieldLower;

// Resolution bias texture (from ResolutionBiasController)
Texture2D<float> _BiasTexture;

// Common parameters
float3 _BoundsMin;
float3 _BoundsMax;
int2 _ChunkMin;
int2 _ChunkSize;

// ----- UTILITY FUNCTIONS -----

// Converts texture coordinates to world position
float3 TextureToWorldPos(int2 texCoord, int2 textureSize)
{
    float2 uv = float2(texCoord) / float2(textureSize - 1);
    float3 worldPos = float3(
        lerp(_BoundsMin.x, _BoundsMax.x, uv.x),
        0,
        lerp(_BoundsMin.z, _BoundsMax.z, uv.y)
    );
    return worldPos;
}

// Converts world position to texture coordinates
int2 WorldPosToTexture(float3 worldPos, int2 textureSize)
{
    float2 uv = float2(
        (worldPos.x - _BoundsMin.x) / (_BoundsMax.x - _BoundsMin.x),
        (worldPos.z - _BoundsMin.z) / (_BoundsMax.z - _BoundsMin.z)
    );
    
    return int2(uv * float2(textureSize - 1));
}

// Samples vector field with bilinear interpolation
float2 SampleVectorFieldBilinear(RWTexture2D<float2> vectorField, float2 uv)
{
    uint width, height;
    vectorField.GetDimensions(width, height);
    int2 dimensions = int2(width, height);
    
    float2 texCoord = uv * float2(dimensions - 1);
    int2 texCoordFloor = int2(floor(texCoord));
    float2 frac = texCoord - float2(texCoordFloor);
    
    // Clamp coordinates to texture bounds
    int2 coord00 = clamp(texCoordFloor, int2(0, 0), dimensions - 1);
    int2 coord10 = clamp(texCoordFloor + int2(1, 0), int2(0, 0), dimensions - 1);
    int2 coord01 = clamp(texCoordFloor + int2(0, 1), int2(0, 0), dimensions - 1);
    int2 coord11 = clamp(texCoordFloor + int2(1, 1), int2(0, 0), dimensions - 1);
    
    // Sample the four nearest texels
    float2 v00 = vectorField[coord00];
    float2 v10 = vectorField[coord10];
    float2 v01 = vectorField[coord01];
    float2 v11 = vectorField[coord11];
    
    // Bilinear interpolation
    float2 v = lerp(
        lerp(v00, v10, frac.x),
        lerp(v01, v11, frac.x),
        frac.y
    );
    
    return v;
}

// ----- KERNEL IMPLEMENTATIONS -----

// Clears vector field to zero
[numthreads(8,8,1)]
void ClearVectorField(uint3 id : SV_DispatchThreadID)
{
    // Get texture dimensions
    uint width, height;
    _VectorFieldTexture.GetDimensions(width, height);
    
    // Skip if outside texture bounds
    if (id.x >= width || id.y >= height)
        return;
    
    // Set to zero (no direction)
    _VectorFieldTexture[id.xy] = float2(0, 0);
}

// ----- TARGET HANDLING -----

// Target parameters
StructuredBuffer<float3> _TargetPositions;
int _TargetCount;
float _TargetRadius;

// Sets target points in the vector field
[numthreads(8,8,1)]
void SetTargets(uint3 id : SV_DispatchThreadID)
{
    // Get texture dimensions
    uint width, height;
    _VectorFieldTexture.GetDimensions(width, height);
    
    // Skip if outside texture bounds
    if (id.x >= width || id.y >= height)
        return;
    
    // IMPORTANT: We're ignoring the navigation texture check for now since all values are 0
    // The original check was:
    // if (_NavigationTexture[id.xy] > 0.5f) { ... return; }
    // But we know all navigation values are 0 from the debug output
    
    // Convert texture coordinate to world position
    float3 worldPos = TextureToWorldPos(id.xy, int2(width, height));
    
    // Check if this pixel is within target radius of any target
    bool isTarget = false;
    float3 closestTarget = float3(0, 0, 0);
    float closestDistSq = 1e10; // Very large number
    
    for (int i = 0; i < _TargetCount; i++)
    {
        float3 targetPos = _TargetPositions[i];
        float distSq = pow(worldPos.x - targetPos.x, 2) + pow(worldPos.z - targetPos.z, 2);
        
        // FIXED: Use the actual target radius (which we've increased in C# code)
        if (distSq < _TargetRadius * _TargetRadius && distSq < closestDistSq)
        {
            isTarget = true;
            closestDistSq = distSq;
            closestTarget = targetPos;
        }
    }
    
    // If this is near a target, set vector pointing away from target
    if (isTarget)
    {
        float2 direction = float2(0, 0);
        
        if (closestDistSq > 0.001f) // Avoid division by zero
        {
            float2 fromTarget = float2(worldPos.x - closestTarget.x, worldPos.z - closestTarget.z);
            direction = normalize(fromTarget);
        }
        
        // Set as a source with magnitude exactly 1.0
        _VectorFieldTexture[id.xy] = direction;
    }
    
    // IMPORTANT: For debugging, set a default vector in the center of the texture
    // This helps us verify if the shader is running at all
    uint centerX = width / 2;
    uint centerY = height / 2;
    uint radius = 50; // Large enough to be visible
    
    if (id.x >= centerX - radius && id.x <= centerX + radius && 
        id.y >= centerY - radius && id.y <= centerY + radius)
    {
        float2 fromCenter = float2(id.x - centerX, id.y - centerY);
        float centerDistSq = dot(fromCenter, fromCenter);
        
        if (centerDistSq < radius * radius && centerDistSq > 0.001f)
        {
            _VectorFieldTexture[id.xy] = normalize(fromCenter);
        }
    }
}

// ----- VECTOR FIELD PROPAGATION -----

// Propagation parameters
float _FalloffRate;
int _PropagationStage;

// Direction vectors for the 8 neighbors
static float2 DIRECTIONS[8] = {
    float2(1, 0),
    float2(1, 1),
    float2(0, 1),
    float2(-1, 1),
    float2(-1, 0),
    float2(-1, -1),
    float2(0, -1),
    float2(1, -1)
};

// Light propagation algorithm implementation
[numthreads(8,8,1)]
void PropagateVectorField(uint3 id : SV_DispatchThreadID)
{
    // Skip if outside the chunk bounds
    int2 chunkMax = _ChunkMin + _ChunkSize;
    if (id.x < _ChunkMin.x || id.y < _ChunkMin.y || id.x >= chunkMax.x || id.y >= chunkMax.y)
        return;
    
    // Get texture dimensions
    uint width, height;
    _VectorFieldTexture.GetDimensions(width, height);
    
    // Skip if outside texture bounds
    if (id.x >= width || id.y >= height)
        return;
    
    // IMPORTANT: We're ignoring the navigation texture check for now since all values are 0
    // The original check was:
    // if (_NavigationTexture[id.xy] > 0.5f) { ... return; }
    // But we know all navigation values are 0 from the debug output
    
    // Get current vector
    float2 currentVector = _VectorFieldTexture[id.xy];
    
    // If this is a target cell (indicated by a vector magnitude of exactly 1.0),
    // don't modify it during propagation stages
    if (length(currentVector) > 0.99f && length(currentVector) < 1.01f)
        return;
    
    // Accumulate influence from neighbors
    float2 accumulatedVector = float2(0, 0);
    float totalWeight = 0;
    
    // Check all 8 neighboring directions
    for (int i = 0; i < 8; i++)
    {
        int2 neighborCoord = id.xy + DIRECTIONS[i];
        
        // Skip if neighbor is outside texture bounds
        if (neighborCoord.x < 0 || neighborCoord.y < 0 || 
            neighborCoord.x >= width || 
            neighborCoord.y >= height)
            continue;
        
        // IMPORTANT: We're ignoring the navigation texture check for neighbors too
        // The original check was:
        // if (_NavigationTexture[neighborCoord] > 0.5f) { ... continue; }
        // But we know all navigation values are 0 from the debug output
        
        // Get vector at neighbor
        float2 neighborVector = _VectorFieldTexture[neighborCoord];
        
        // Skip if neighbor has no direction
        if (length(neighborVector) < 0.01f)
            continue;
        
        // Calculate weight based on neighbor's vector magnitude and falloff
        float weight = length(neighborVector) * _FalloffRate;
        
        // Add to accumulated vector
        accumulatedVector += neighborVector * weight;
        totalWeight += weight;
    }
    
    // Update vector if we have any influence
    if (totalWeight > 0)
    {
        // Normalize the accumulated vector
        float2 newVector = accumulatedVector / totalWeight;
        
        // Store the new direction with slightly reduced magnitude for falloff
        _VectorFieldTexture[id.xy] = normalize(newVector) * (length(newVector) * _FalloffRate);
    }
}

// ----- RESOLUTION TRANSITIONS -----

// Blending parameters
float _BlendFactor;

// Applies smooth transitions between resolution levels
[numthreads(8,8,1)]
void ApplyResolutionTransitions(uint3 id : SV_DispatchThreadID)
{
    // Skip if outside the chunk bounds
    int2 chunkMax = _ChunkMin + _ChunkSize;
    if (id.x < _ChunkMin.x || id.y < _ChunkMin.y || id.x >= chunkMax.x || id.y >= chunkMax.y)
        return;
    
    // Get texture dimensions
    uint currentWidth, currentHeight;
    _VectorFieldCurrent.GetDimensions(currentWidth, currentHeight);
    
    // Skip if outside texture bounds
    if (id.x >= currentWidth || id.y >= currentHeight)
        return;
    
    // IMPORTANT: We're ignoring the navigation texture check for now since all values are 0
    // The original check was:
    // if (_NavigationTexture[id.xy] > 0.5f) { ... return; }
    // But we know all navigation values are 0 from the debug output
    
    // Convert to normalized coordinates
    float2 uv = float2(id.xy) / float2(currentWidth - 1, currentHeight - 1);
    
    // Get bias texture dimensions
    uint biasWidth, biasHeight;
    _BiasTexture.GetDimensions(biasWidth, biasHeight);
    
    // Get the bias value at this position (using direct lookup instead of sampling)
    int2 biasCoord = int2(uv * float2(biasWidth - 1, biasHeight - 1));
    biasCoord = clamp(biasCoord, int2(0, 0), int2(biasWidth - 1, biasHeight - 1));
    float bias = _BiasTexture[biasCoord];
    
    // Calculate the blend amount between resolution levels
    float levelBlend = frac(bias) * _BlendFactor;
    
    // Get the vector from the current resolution level
    float2 currentLevelVector = _VectorFieldCurrent[id.xy];
    
    // Get the vector from the lower resolution level (using bilinear sampling)
    float2 lowerLevelVector = SampleVectorFieldBilinear(_VectorFieldLower, uv);
    
    // Skip if both vectors have zero length
    if (length(currentLevelVector) < 0.01f && length(lowerLevelVector) < 0.01f)
        return;
    
    // Blend the two vectors together
    // If either vector is zero, use the other one completely
    float2 blendedVector;
    
    if (length(currentLevelVector) < 0.01f)
        blendedVector = lowerLevelVector;
    else if (length(lowerLevelVector) < 0.01f)
        blendedVector = currentLevelVector;
    else
        blendedVector = normalize(lerp(currentLevelVector, lowerLevelVector, levelBlend));
    
    // Write back to the current level texture
    _VectorFieldCurrent[id.xy] = blendedVector;
}
