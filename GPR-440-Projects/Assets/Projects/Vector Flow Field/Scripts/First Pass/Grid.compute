// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
StructuredBuffer<float2> triangles;
uint numTriangles;
float2 minBounds;
float2 maxBounds;
float2 textureSize;
StructuredBuffer<float2> sinks;
int numSinks;
float sinkRadius;

bool PointInTriangle(float2 p, float2 a, float2 b, float2 c)
{
    float2 v0 = c - a;
    float2 v1 = b - a;
    float2 v2 = p - a;

    float dot00 = dot(v0, v0);
    float dot01 = dot(v0, v1);
    float dot02 = dot(v0, v2);
    float dot11 = dot(v1, v1);
    float dot12 = dot(v1, v2);

    float invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

    return (u >= 0.0) && (v >= 0.0) && (u + v <= 1.0);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= textureSize.x || id.y >= textureSize.y)
        return;

    float2 uv = float2(id.x / (textureSize.x - 1), id.y / (textureSize.y - 1));
    float2 meshPos = minBounds + uv * (maxBounds - minBounds);
    
    bool isSink = false;
    for (uint i = 0; i < numSinks; i++)
    {
        if (distance(meshPos, sinks[i]) < sinkRadius)
        {
            isSink = true;
            break;
        }
    }
    if (isSink)
    {
        Result[id.xy] = float4(1, 0, 0, 1);
        return;
    }
    
    bool inside = false;
    for (uint i = 0; i < numTriangles; i++)
    {
        uint tri = i * 3;
        float2 a = triangles[tri];
        float2 b = triangles[tri + 1];
        float2 c = triangles[tri + 2];

        if (PointInTriangle(meshPos, a, b, c))
        {
            inside = true;
            break;
        }
    }

    Result[id.xy] = inside ? float4(1, 1, 1, 1) : float4(0, 0, 0, 1);
}
